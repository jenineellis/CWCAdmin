{"ast":null,"code":"import _slicedToArray from \"/Users/jenineellis/Documents/Bootcamp/coding/CWCAdmin/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/jenineellis/Documents/Bootcamp/coding/CWCAdmin/client/src/pages/dashboard/Dashboard.js\";\nimport React, { useState } from \"react\";\nimport { Grid, LinearProgress, Select, OutlinedInput, MenuItem } from \"@material-ui/core\";\nimport { useTheme } from \"@material-ui/styles\";\nimport { ResponsiveContainer, ComposedChart, AreaChart, LineChart, Line, Area, PieChart, Pie, Cell, YAxis, XAxis } from \"recharts\";\nimport style from \"./styles\";\nimport mock from \"./mock\";\nimport Widget from \"../../components/Widget\";\nimport PageTitle from \"../../components/PageTitle\";\nimport { Typography } from \"../../components/Wrappers\";\nimport Dot from \"../../components/Sidebar/components/Dot\";\nimport Table from \"./components/producerTable/Table\";\nimport BigStat from \"./components/BigStat/BigStat\"; // const mainChartData = getMainChartData();\n// const PieChartData = [\n//   { name: \"Group A\", value: 400, color: \"primary\" },\n//   { name: \"Group B\", value: 300, color: \"secondary\" },\n//   { name: \"Group C\", value: 300, color: \"warning\" },\n//   { name: \"Group D\", value: 200, color: \"success\" },\n// ];\n\nexport default function Dashboard(props) {\n  var classes = style();\n  var theme = useTheme(); // local\n\n  var _useState = useState(\"monthly\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      mainChartState = _useState2[0],\n      setMainChartState = _useState2[1];\n\n  return React.createElement(React.Fragment, null, React.createElement(PageTitle, {\n    title: \"Dashboard\",\n    button: \"Latest Reports\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }), React.createElement(Grid, {\n    container: true,\n    spacing: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    lg: 3,\n    md: 4,\n    sm: 6,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }), React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }), mock.bigStat.map(stat => React.createElement(Grid, {\n    item: true,\n    md: 4,\n    sm: 6,\n    xs: 12,\n    key: stat.product,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(BigStat, Object.assign({}, stat, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  })))), React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(Widget, {\n    title: \"Producers\",\n    upperTitle: true,\n    noBodyPadding: true,\n    bodyClass: classes.tableWidget,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(Table, {\n    data: mock.table,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  })))));\n} // #######################################################################\n\nfunction getRandomData(length, min, max, multiplier = 10, maxDiff = 10) {\n  var array = new Array(length).fill();\n  let lastValue;\n  return array.map((item, index) => {\n    let randomValue = Math.floor(Math.random() * multiplier + 1);\n\n    while (randomValue <= min || randomValue >= max || lastValue && randomValue - lastValue > maxDiff) {\n      randomValue = Math.floor(Math.random() * multiplier + 1);\n    }\n\n    lastValue = randomValue;\n    return {\n      value: randomValue\n    };\n  });\n} // function getMainChartData() {\n//   var resultArray = [];\n//   var Whites = getRandomData(31, 3500, 6500, 7500, 1000);\n//   var Reds = getRandomData(31, 1500, 7500, 7500, 1500);\n//   var Sparkeling = getRandomData(31, 1500, 7500, 7500, 1500);\n//   var Rose = getRandomData(31, 1500, 7500, 7500, 1500);\n//   for (let i = 0; i < wine.length; i++) {\n//     resultArray.push({\n//       Red: Red[i].value,\n//       White: White[i].value,\n//       Sparkeling: Sparkeling[i].value,\n//       Rose: Rose[i].value,\n//     });\n//   }\n// return resultArray;\n// }","map":{"version":3,"sources":["/Users/jenineellis/Documents/Bootcamp/coding/CWCAdmin/client/src/pages/dashboard/Dashboard.js"],"names":["React","useState","Grid","LinearProgress","Select","OutlinedInput","MenuItem","useTheme","ResponsiveContainer","ComposedChart","AreaChart","LineChart","Line","Area","PieChart","Pie","Cell","YAxis","XAxis","style","mock","Widget","PageTitle","Typography","Dot","Table","BigStat","Dashboard","props","classes","theme","mainChartState","setMainChartState","bigStat","map","stat","product","tableWidget","table","getRandomData","length","min","max","multiplier","maxDiff","array","Array","fill","lastValue","item","index","randomValue","Math","floor","random","value"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Grid, LinearProgress, Select, OutlinedInput, MenuItem, } from \"@material-ui/core\";\nimport { useTheme } from \"@material-ui/styles\";\nimport { ResponsiveContainer, ComposedChart, AreaChart, LineChart, Line, Area, PieChart, Pie, Cell, YAxis, XAxis, } from \"recharts\";\nimport style from \"./styles\";\nimport mock from \"./mock\";\nimport Widget from \"../../components/Widget\";\nimport PageTitle from \"../../components/PageTitle\";\nimport { Typography } from \"../../components/Wrappers\";\nimport Dot from \"../../components/Sidebar/components/Dot\";\nimport Table from \"./components/producerTable/Table\";\nimport BigStat from \"./components/BigStat/BigStat\";\n\n// const mainChartData = getMainChartData();\n// const PieChartData = [\n//   { name: \"Group A\", value: 400, color: \"primary\" },\n//   { name: \"Group B\", value: 300, color: \"secondary\" },\n//   { name: \"Group C\", value: 300, color: \"warning\" },\n//   { name: \"Group D\", value: 200, color: \"success\" },\n// ];\n\nexport default function Dashboard(props) {\n  var classes = style();\n  var theme = useTheme();\n\n  // local\n  var [mainChartState, setMainChartState] = useState(\"monthly\");\n\n  return (\n    <>\n      <PageTitle title=\"Dashboard\" button=\"Latest Reports\" />\n      <Grid container spacing={4}>\n        <Grid item lg={3} md={4} sm={6} xs={12}>\n        </Grid>\n        <Grid item xs={12}>\n        </Grid>\n        {mock.bigStat.map(stat => (\n          <Grid item md={4} sm={6} xs={12} key={stat.product}>\n            <BigStat {...stat} />\n          </Grid>\n        ))}\n        <Grid item xs={12}>\n          <Widget\n            title=\"Producers\"\n            upperTitle\n            noBodyPadding\n            bodyClass={classes.tableWidget}\n          >\n            <Table data={mock.table} />\n          </Widget>\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n\n// #######################################################################\nfunction getRandomData(length, min, max, multiplier = 10, maxDiff = 10) {\n  var array = new Array(length).fill();\n  let lastValue;\n\n  return array.map((item, index) => {\n    let randomValue = Math.floor(Math.random() * multiplier + 1);\n\n    while (\n      randomValue <= min ||\n      randomValue >= max ||\n      (lastValue && randomValue - lastValue > maxDiff)\n    ) {\n      randomValue = Math.floor(Math.random() * multiplier + 1);\n    }\n\n    lastValue = randomValue;\n\n    return { value: randomValue };\n  });\n}\n\n// function getMainChartData() {\n//   var resultArray = [];\n//   var Whites = getRandomData(31, 3500, 6500, 7500, 1000);\n//   var Reds = getRandomData(31, 1500, 7500, 7500, 1500);\n//   var Sparkeling = getRandomData(31, 1500, 7500, 7500, 1500);\n//   var Rose = getRandomData(31, 1500, 7500, 7500, 1500);\n\n//   for (let i = 0; i < wine.length; i++) {\n//     resultArray.push({\n//       Red: Red[i].value,\n//       White: White[i].value,\n//       Sparkeling: Sparkeling[i].value,\n//       Rose: Rose[i].value,\n//     });\n//   }\n\n  // return resultArray;\n// }"]},"metadata":{},"sourceType":"module"}